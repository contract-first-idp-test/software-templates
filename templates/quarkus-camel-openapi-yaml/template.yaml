apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-camel-openapi-yaml-template
  title: Quarkus Camel OpenAPI (YAML DSL)
  description: OpenAPI server/client with Camel (YAML DSL) on Quarkus (Kaoto-compatible)
spec:
  owner: backstage-admins
  type: service
  
  parameters:
    - title: General Settings
      required:
        - component_id
        - description
        - deployment
        - owner
        - system
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        description:
          title: Description
          type: string
          description: Help others understand what this component does
        deployment:
          title: Select the deployment strategy
          type: string
          default: jvm
          enum:
            - jvm
            - legacy-jar
            - native
            - native-micro
          enumNames:
            - JVM
            - JVM with legacy-jar
            - Native
            - Native Micro
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        system:
          title: System
          type: string
          description: System to which this Component belongs
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - System

    - title: API Implementation
      required:
        - implements_api
      properties:
        implements_api:
          title: Implements API
          type: boolean
          description: Does this service implement an API specification?
          default: false
      dependencies:
        implements_api:
          allOf:
            - if:
                properties:
                  implements_api:
                    const: true
              then:
                properties:
                  api:
                    title: API
                    type: string
                    description: The API being implemented
                    ui:field: EntityPicker
                    ui:options:
                      allowedKinds:
                        - API

    - title: API Consumption
      required:
        - consumes_apis
      properties:
        consumes_apis:
          title: Consumes APIs
          type: boolean
          description: Does this service consume API specification(s)?
          default: false
      dependencies:
        consumes_apis:
          allOf:
            - if:
                properties:
                  consumes_apis:
                    const: true
              then:
                properties:
                  consumed_api:
                    title: Consumed API
                    type: string
                    description: The API being consumed
                    ui:field: EntityPicker
                    ui:options:
                      allowedKinds:
                        - API
                  consumed_api_operation:
                    title: Operation to invoke on the consumed API
                    type: string

  steps:

    - id: fetch-domain
      name: fetch domain context
      action: catalog:fetch
      input:
        entityRef: domain:default/demo

    - id: fetch-system
      name: fetch system context
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.system }}

    - id: fetch-api
      name: fetch api context
      if: ${{ parameters.implements_api }}
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.api }}

    - id: fetch-consumed-api
      name: fetch consumed api context
      if: ${{ parameters.consumes_apis }}
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.consumed_api }}

    - id: component-template
      name: render component source code
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          folder_java_package: ${{ steps['fetch-domain'].output.entity.metadata.labels['artifact-group'] | replace('.', '/') }}/${{ steps['fetch-system'].output.entity.metadata.name | replace('-', '') }}/${{ parameters.component_id | replace('-', '') }}
          java_group_id: ${{ steps['fetch-domain'].output.entity.metadata.labels['artifact-group'] }}.${{ steps['fetch-system'].output.entity.metadata.name | replace('-', '') }}
          java_package: ${{ steps['fetch-domain'].output.entity.metadata.labels['artifact-group'] }}.${{ steps['fetch-system'].output.entity.metadata.name | replace('-', '') }}.${{ parameters.component_id | replace('-', '') }}
          owner: ${{ parameters.owner }}
          git_org: ${{ steps['fetch-domain'].output.entity.metadata.labels['git-org'] }}
          system_ref: ${{ parameters.system }}
          system_name: ${{ steps['fetch-system'].output.entity.metadata.name }}
          openshift_cluster_domain: ${{ steps['fetch-domain'].output.entity.metadata.labels['cluster-domain'] }}
          service_registry_provider_url: https://registry-apicurio-registry.${{ steps['fetch-domain'].output.entity.metadata.labels['cluster-domain'] }}
          service_registry_group_id: ${{ steps['fetch-domain'].output.entity.metadata.labels['artifact-group'] }}.${{ steps['fetch-system'].output.entity.metadata.name | replace('-', '') }}
          implements_api: ${{ parameters.implements_api }}
          api_name: ${{ steps['fetch-api'].output.entity.metadata.name if parameters.implements_api else null }}
          consumes_apis: ${{ parameters.consumes_apis }}
          consumed_api_name: ${{ steps['fetch-consumed-api'].output.entity.metadata.name if parameters.consumes_apis else null }}
          consumed_api_operation: ${{ parameters.consumed_api_operation if parameters.consumes_apis else null}}

    - id: publish
      name: publish component source repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?repo=${{ steps['fetch-system'].output.entity.metadata.name }}-${{ parameters.component_id }}-service&owner=${{ steps['fetch-domain'].output.entity.metadata.labels['git-org'] }}
        repoVisibility: public
        defaultBranch: main
        deleteBranchOnMerge: true
        protectDefaultBranch: false

    - id: webhook
      name: webhook creation source repository
      action: github:webhook
      input:
        repoUrl: github.com?repo=${{ steps['fetch-system'].output.entity.metadata.name }}-${{ parameters.component_id }}-service&owner=${{ steps['fetch-domain'].output.entity.metadata.labels['git-org'] }}
        webhookUrl: https://webhook-${{ steps['fetch-system'].output.entity.metadata.name }}-${{ parameters.component_id }}-el-${{ steps['fetch-system'].output.entity.metadata.name }}-build.${{ steps['fetch-domain'].output.entity.metadata.labels['cluster-domain'] }}
        webhookSecret: 'mysecret'
        events: [ 'push' ]
        active: true
        contentType: 'json'
        insecureSsl: false

    - id: register
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

    - id: system-template
      name: render system pull request
      action: fetch:template
      input:
        url: ./system
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          system_name: ${{ steps['fetch-system'].output.entity.metadata.name }}
          deployment: ${{ parameters.deployment }}
          git_org: ${{ steps['fetch-domain'].output.entity.metadata.labels['git-org'] }}
        targetPath: ./system-gitops

    - id: pr
      name: Open PR to System
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=${{ steps['fetch-system'].output.entity.metadata.name }}-system&owner=${{ steps['fetch-domain'].output.entity.metadata.labels['git-org'] }}
        branchName: ${{ parameters.component_id }}-component
        title: add ${{ parameters.component_id }} component
        description: add ${{ parameters.component_id }} component
        sourcePath: ./system-gitops

  output:
    links:
      - title: Pull Request to System
        url: ${{ steps.pr.output.remoteUrl }}
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
